{
	"info": {
		"_postman_id": "2a26ac6e-ef79-4ace-9c75-98473702dcb8",
		"name": "HW_2_stars",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Необходимо провести тестирование API данного эндпоинта на валидацию входных параметров. Суть задания: проверить валидации каждого поля, подаваемого в эндпоинт на возможные значения. Будем УСЛОВНО считать, что негативная проверка должна возвращать какой угодно статус НО НЕ 200! Ваша задача написать тест кейсы в постмане таким образом, что одна негативная проверка - один запрос, позитивные проверки можно объединять в 1. Ваша задача протестировать исходя из требований на все возможные аспекты. В каждом запросе тест ТОЛЬКО НА СТАТУС КОД (200 - позитивное значение, не 200 - негативное). \r",
							"// P.S. ЗАДАНИЕ НЕ ПОДРАЗУМЕВАЕТ, ЧТО ЭНДПОИНТ РАБОТАЕТ СОГЛАСНО НАПИСАННЫМ ТРЕБОВАНИЯМ. МЫ УЧИМСЯ ПИСАТЬ ТЕСТЫ НА API!\r",
							"// Требования:\r",
							"// 1) Name: 3-40 символов включительно, запрещены префиксные и постфиксные пробелы. Поле обязательное\r",
							"// 2) Age: только целые цифры в диапазоне 18-120 включительно. Поле обязательное\r",
							"// 3) Salary: только целые цифры в диапазоне 1-1000000 включительно. Поле обязательное\r",
							"let req = request.data\r",
							"\r",
							"const checkName = function(name) {\r",
							"    if (name && (3 <= +name.length) && (+name.length <= 40) && (name.trim() === name)) \r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkAge = function(age) {\r",
							"    if (age && (age >= 18) && (age <= 120) && (Number.isInteger(Number(age))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkSalary = function(salary) {\r",
							"    if (salary && (salary >= 1) && (salary <= 1000000) && (Number.isInteger(Number(salary))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"\r",
							"console.log(checkName(req.name))\r",
							"console.log(checkAge(req.age))\r",
							"console.log(checkSalary(req.salary))\r",
							"\r",
							"if (checkName(req.name) && checkAge(req.age) && checkSalary(req.salary)) {\r",
							"    console.log('200')\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"} \r",
							"else {\r",
							"    if (!req.name) {\r",
							"        pm.test(\"Пустое поле name\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.age) {\r",
							"        pm.test(\"Пустое поле age\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.salary) {\r",
							"        pm.test(\"Пустое поле salary\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (isNaN(req.salary)) {\r",
							"        pm.test(\"Salary not a number\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (isNaN(req.age)) {\r",
							"        pm.test(\"Age not a number\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length < 3 && req.name.length > 0) {\r",
							"        pm.test(\"Length name < 3\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length > 40) {\r",
							"        pm.test(\"Length name > 40\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.trim() !== req.name) {\r",
							"        pm.test(\"Пробелы\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age < 18) {\r",
							"        pm.test(\"Age < 18\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age > 120) {\r",
							"        pm.test(\"Age > 120\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary < 1) {\r",
							"        pm.test(\"Salary < 1\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary > 1000000) {\r",
							"        pm.test(\"Salary > 1000000\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "   иии",
							"type": "default"
						},
						{
							"key": "age",
							"value": "40",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "0",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// * Преобразовать пункты 12-13-14 (salary из реквеста и респонса равны) таким образом, чтобы проверка производилась циклом, в котором будет всего ОДИН тест. Имя теста должно меняться в зависимости от значения в Salary\r",
							"let jsonData = pm.response.json();\r",
							"let req = pm.request.url.query.toObject();\r",
							"for (i in jsonData.salary) {\r",
							"    pm.test(`salary ${i} equally salary from request`, function () {\r",
							"        pm.expect(+req.salary*(+i+1)).to.eql(+jsonData.salary[i]);\r",
							"});\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Преобразовать задания 5-7 (сравнить идентичные поля в реквесте и респонсе) таким образом, чтобы это делалось ЗА ОДИН ТЕСТ (сразу все 3 поля) БЕЗ ЦИКЛОВ! (глубокое сравнение объектов)\r",
							"let jsonData = pm.response.json();\r",
							"let req = pm.request.url.query.toObject()\r",
							"const newobj = {\r",
							"    name: jsonData.name,\r",
							"    age: jsonData.age,\r",
							"    salary: jsonData.salary + ''\r",
							"    }\r",
							"pm.test(\"deep object comparison\", function () {\r",
							"    pm.expect(newobj).to.deep.eql(req);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1)  Преобразовать задания 8 - 13 (проверить что в json имеется нужный параметр) таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)\r",
							"\r",
							" let jsonData = pm.response.json();\r",
							" let req = request.data\r",
							"for (i in jsonData) {\r",
							"    if (i !== 'person') { \r",
							"        pm.test(`json response имеет параметр ${i}`, function () {\r",
							"            pm.expect(jsonData).to.have.property(i);\r",
							"        });\r",
							"    }\r",
							"}\r",
							"\r",
							"// 2) ** Преобразовать задания 14 - 18 (проверить что параметр равен salary умножить на коэффициент) таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)\r",
							"const index = {\r",
							"    'person': '',\r",
							"    'start_qa_salary': 1,\r",
							"    'qa_salary_after_6_months': 2,\r",
							"    'qa_salary_after_12_months': 2.7,\r",
							"    'qa_salary_after_1.5_year': 3.3,\r",
							"    'qa_salary_after_3.5_years': 3.8\r",
							"}\r",
							"\r",
							"for (i in jsonData) {\r",
							"  if (i !== 'person') {\r",
							"    pm.test(`параметр ${i} равен ${req.salary}*${index[i]}`, function () {\r",
							"        pm.expect(req.salary*index[i]).to.eql(+jsonData[i]);\r",
							"    });\r",
							"  }\r",
							"}\r",
							"\r",
							"// 3) *** Преобразовать описанные выше задания 1 и 2 для данного эндпоинта в ОДИН ЦИКЛ, в котором будут проходить ОБА теста.\r",
							"\r",
							"for (i in jsonData) {\r",
							"    if (i !== 'person') { \r",
							"        pm.test(`json response имеет параметр ${i}`, function () {\r",
							"            pm.expect(jsonData).to.have.property(i);\r",
							"        });\r",
							"        pm.test(`параметр ${i} равен ${req.salary}*${index[i]}`, function () {\r",
							"            pm.expect(req.salary*index[i]).to.eql(+jsonData[i]);\r",
							"        });\r",
							"    }\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}