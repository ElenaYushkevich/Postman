{
	"info": {
		"_postman_id": "2a26ac6e-ef79-4ace-9c75-98473702dcb8",
		"name": "HW_2_stars",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// * Преобразовать пункты 12-13-14 (salary из реквеста и респонса равны) таким образом, чтобы проверка производилась циклом, в котором будет всего ОДИН тест. Имя теста должно меняться в зависимости от значения в Salary\r",
							"let jsonData = pm.response.json();\r",
							"let req = pm.request.url.query.toObject();\r",
							"for (i in jsonData.salary) {\r",
							"    pm.test(`salary ${i} equally salary from request`, function () {\r",
							"        pm.expect(+req.salary*(+i+1)).to.eql(+jsonData.salary[i]);\r",
							"});\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Преобразовать задания 5-7 (сравнить идентичные поля в реквесте и респонсе) таким образом, чтобы это делалось ЗА ОДИН ТЕСТ (сразу все 3 поля) БЕЗ ЦИКЛОВ! (глубокое сравнение объектов)\r",
							"let jsonData = pm.response.json();\r",
							"let req = pm.request.url.query.toObject()\r",
							"const respObject = {\r",
							"    name: jsonData.name,\r",
							"    age: jsonData.age,\r",
							"    salary: jsonData.salary + ''\r",
							"    }\r",
							"pm.test(\"deep object comparison\", function () {\r",
							"    pm.expect(req).to.deep.eql(respObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1)  Преобразовать задания 8 - 13 (проверить что в json имеется нужный параметр) таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)\r",
							"const keyJson = ['person', 'start_qa_salary', 'qa_salary_after_6_months', 'qa_salary_after_12_months','qa_salary_after_1.5_year', 'qa_salary_after_3.5_years']\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"keyJson.forEach(key => { \r",
							"        pm.test(`json response имеет параметр ${key}`, function () {\r",
							"            pm.expect(jsonData).to.have.property(key);\r",
							"        });\r",
							"})\r",
							"\r",
							"// 2) ** Преобразовать задания 14 - 18 (проверить что параметр равен salary умножить на коэффициент) таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)\r",
							"\r",
							"const index = {\r",
							"    'person':'',\r",
							"    'start_qa_salary': 1,\r",
							"    'qa_salary_after_6_months': 2,\r",
							"    'qa_salary_after_12_months': 2.7,\r",
							"    'qa_salary_after_1.5_year': 3.3,\r",
							"    'qa_salary_after_3.5_years': 3.8\r",
							"}\r",
							"let req = request.data\r",
							"\r",
							"for (i in index) {\r",
							"    if (i !== 'person') {\r",
							"        pm.test(`параметр ${i} равен ${req.salary}*${index[i]}`, function () {\r",
							"            pm.expect(req.salary*index[i]).to.eql(+jsonData[i]);\r",
							"        });\r",
							"    }\r",
							"}\r",
							"\r",
							"// 3) *** Преобразовать описанные выше задания 1 и 2 для данного эндпоинта в ОДИН ЦИКЛ, в котором будут проходить ОБА теста.\r",
							"\r",
							"for (i in index) {\r",
							"    pm.test(`json response имеет параметр ${i}`, function () {\r",
							"        pm.expect(jsonData).to.have.property(i);\r",
							"    });\r",
							"    if (i !== 'person') {    \r",
							"        pm.test(`параметр ${i} равен ${req.salary}*${index[i]}`, function () {\r",
							"            pm.expect(req.salary*index[i]).to.eql(+jsonData[i]);\r",
							"        });\r",
							"    }\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}