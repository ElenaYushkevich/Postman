{
	"info": {
		"_postman_id": "97b2c5cb-42fd-466a-97ee-81726232c91a",
		"name": "HW_2_user_info_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "valid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1****. Преобразовать задание 1 таким образом, чтобы вы отправляли параметры через CSV файл. У вас будет ровно 1 запрос в коллекции, который будет повторяться столько раз, сколько строк в CSV файле. Также должна быть написана функция в тестах, которая проверяет валидность входящих данных, и в зависимости от этого проверяет на статус 200 или НЕ 200.\r",
							"let req = request.data\r",
							"let name = req.name;\r",
							"let age = req.age;\r",
							"let salary = req.salary;\r",
							"\r",
							"const checkName = function(value) {\r",
							"    if (value && (3 <= +value.length) && (+value.length <= 40) && (value.trim() === value)) \r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkAge = function(value) {\r",
							"    if (value && (value >= 18) && (value <= 120) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkSalary = function(value) {\r",
							"    if (value && (value >= 1) && (value <= 1000000) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"\r",
							"const checkValid = function() {\r",
							"    if (checkName(name) && checkAge(age) && checkSalary(salary))\r",
							"        return true\r",
							"        else false   \r",
							"}\r",
							"\r",
							"const checkNotValid = function() {\r",
							"if (!req.name) {\r",
							"        pm.test(\"Empty field name\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.age) {\r",
							"        pm.test(\"Empty field age\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.salary) {\r",
							"        pm.test(\"Empty field salary\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length < 3 && req.name.length > 0) {\r",
							"        pm.test(\"Length name < 3\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length > 40) {\r",
							"        pm.test(\"Length name > 40\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.trim() !== req.name) {\r",
							"        pm.test(\"There are spaces\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age < 18) {\r",
							"        pm.test(\"Age < 18\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age > 120) {\r",
							"        pm.test(\"Age > 120\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary < 1) {\r",
							"        pm.test(\"Salary < 1\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary > 1000000) {\r",
							"        pm.test(\"Salary > 1000000\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.salary))) {\r",
							"        pm.test(\"Salary is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.age))) {\r",
							"        pm.test(\"Age is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"}\r",
							"\r",
							"if (checkValid()) {\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"} \r",
							"else checkNotValid() "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "",
							"type": "default"
						},
						{
							"key": "age",
							"value": "",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1****. Преобразовать задание 1 таким образом, чтобы вы отправляли параметры через CSV файл. У вас будет ровно 1 запрос в коллекции, который будет повторяться столько раз, сколько строк в CSV файле. Также должна быть написана функция в тестах, которая проверяет валидность входящих данных, и в зависимости от этого проверяет на статус 200 или НЕ 200.\r",
							"let req = request.data\r",
							"let name = req.name;\r",
							"let age = req.age;\r",
							"let salary = req.salary;\r",
							"\r",
							"const checkName = function(value) {\r",
							"    if (value && (3 <= +value.length) && (+value.length <= 40) && (value.trim() === value)) \r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkAge = function(value) {\r",
							"    if (value && (value >= 18) && (value <= 120) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkSalary = function(value) {\r",
							"    if (value && (value >= 1) && (value <= 1000000) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"\r",
							"const checkValid = function() {\r",
							"    if (checkName(name) && checkAge(age) && checkSalary(salary))\r",
							"        return true\r",
							"        else false   \r",
							"}\r",
							"\r",
							"const checkNotValid = function() {\r",
							"if (!req.name) {\r",
							"        pm.test(\"Empty field name\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.age) {\r",
							"        pm.test(\"Empty field age\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.salary) {\r",
							"        pm.test(\"Empty field salary\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length < 3 && req.name.length > 0) {\r",
							"        pm.test(\"Length name < 3\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length > 40) {\r",
							"        pm.test(\"Length name > 40\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.trim() !== req.name) {\r",
							"        pm.test(\"There are spaces\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age < 18) {\r",
							"        pm.test(\"Age < 18\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age > 120) {\r",
							"        pm.test(\"Age > 120\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary < 1) {\r",
							"        pm.test(\"Salary < 1\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary > 1000000) {\r",
							"        pm.test(\"Salary > 1000000\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.salary))) {\r",
							"        pm.test(\"Salary is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.age))) {\r",
							"        pm.test(\"Age is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"}\r",
							"\r",
							"if (checkValid()) {\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"} \r",
							"else checkNotValid() "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Lena",
							"type": "default"
						},
						{
							"key": "age",
							"value": "40",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "name 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1****. Преобразовать задание 1 таким образом, чтобы вы отправляли параметры через CSV файл. У вас будет ровно 1 запрос в коллекции, который будет повторяться столько раз, сколько строк в CSV файле. Также должна быть написана функция в тестах, которая проверяет валидность входящих данных, и в зависимости от этого проверяет на статус 200 или НЕ 200.\r",
							"let req = request.data\r",
							"let name = req.name;\r",
							"let age = req.age;\r",
							"let salary = req.salary;\r",
							"\r",
							"const checkName = function(value) {\r",
							"    if (value && (3 <= +value.length) && (+value.length <= 40) && (value.trim() === value)) \r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkAge = function(value) {\r",
							"    if (value && (value >= 18) && (value <= 120) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkSalary = function(value) {\r",
							"    if (value && (value >= 1) && (value <= 1000000) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"\r",
							"const checkValid = function() {\r",
							"    if (checkName(name) && checkAge(age) && checkSalary(salary))\r",
							"        return true\r",
							"        else false   \r",
							"}\r",
							"\r",
							"const checkNotValid = function() {\r",
							"if (!req.name) {\r",
							"        pm.test(\"Empty field name\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.age) {\r",
							"        pm.test(\"Empty field age\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.salary) {\r",
							"        pm.test(\"Empty field salary\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length < 3 && req.name.length > 0) {\r",
							"        pm.test(\"Length name < 3\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length > 40) {\r",
							"        pm.test(\"Length name > 40\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.trim() !== req.name) {\r",
							"        pm.test(\"There are spaces\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age < 18) {\r",
							"        pm.test(\"Age < 18\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age > 120) {\r",
							"        pm.test(\"Age > 120\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary < 1) {\r",
							"        pm.test(\"Salary < 1\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary > 1000000) {\r",
							"        pm.test(\"Salary > 1000000\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.salary))) {\r",
							"        pm.test(\"Salary is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.age))) {\r",
							"        pm.test(\"Age is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"}\r",
							"\r",
							"if (checkValid()) {\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"} \r",
							"else checkNotValid() "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Len",
							"type": "default"
						},
						{
							"key": "age",
							"value": "40",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "name 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1****. Преобразовать задание 1 таким образом, чтобы вы отправляли параметры через CSV файл. У вас будет ровно 1 запрос в коллекции, который будет повторяться столько раз, сколько строк в CSV файле. Также должна быть написана функция в тестах, которая проверяет валидность входящих данных, и в зависимости от этого проверяет на статус 200 или НЕ 200.\r",
							"let req = request.data\r",
							"let name = req.name;\r",
							"let age = req.age;\r",
							"let salary = req.salary;\r",
							"\r",
							"const checkName = function(value) {\r",
							"    if (value && (3 <= +value.length) && (+value.length <= 40) && (value.trim() === value)) \r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkAge = function(value) {\r",
							"    if (value && (value >= 18) && (value <= 120) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkSalary = function(value) {\r",
							"    if (value && (value >= 1) && (value <= 1000000) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"\r",
							"const checkValid = function() {\r",
							"    if (checkName(name) && checkAge(age) && checkSalary(salary))\r",
							"        return true\r",
							"        else false   \r",
							"}\r",
							"\r",
							"const checkNotValid = function() {\r",
							"if (!req.name) {\r",
							"        pm.test(\"Empty field name\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.age) {\r",
							"        pm.test(\"Empty field age\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.salary) {\r",
							"        pm.test(\"Empty field salary\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length < 3 && req.name.length > 0) {\r",
							"        pm.test(\"Length name < 3\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length > 40) {\r",
							"        pm.test(\"Length name > 40\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.trim() !== req.name) {\r",
							"        pm.test(\"There are spaces\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age < 18) {\r",
							"        pm.test(\"Age < 18\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age > 120) {\r",
							"        pm.test(\"Age > 120\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary < 1) {\r",
							"        pm.test(\"Salary < 1\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary > 1000000) {\r",
							"        pm.test(\"Salary > 1000000\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.salary))) {\r",
							"        pm.test(\"Salary is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.age))) {\r",
							"        pm.test(\"Age is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"}\r",
							"\r",
							"if (checkValid()) {\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"} \r",
							"else checkNotValid() "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "   Lena",
							"type": "default"
						},
						{
							"key": "age",
							"value": "40",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "name space",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1****. Преобразовать задание 1 таким образом, чтобы вы отправляли параметры через CSV файл. У вас будет ровно 1 запрос в коллекции, который будет повторяться столько раз, сколько строк в CSV файле. Также должна быть написана функция в тестах, которая проверяет валидность входящих данных, и в зависимости от этого проверяет на статус 200 или НЕ 200.\r",
							"let req = request.data\r",
							"let name = req.name;\r",
							"let age = req.age;\r",
							"let salary = req.salary;\r",
							"\r",
							"const checkName = function(value) {\r",
							"    if (value && (3 <= +value.length) && (+value.length <= 40) && (value.trim() === value)) \r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkAge = function(value) {\r",
							"    if (value && (value >= 18) && (value <= 120) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkSalary = function(value) {\r",
							"    if (value && (value >= 1) && (value <= 1000000) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"\r",
							"const checkValid = function() {\r",
							"    if (checkName(name) && checkAge(age) && checkSalary(salary))\r",
							"        return true\r",
							"        else false   \r",
							"}\r",
							"\r",
							"const checkNotValid = function() {\r",
							"if (!req.name) {\r",
							"        pm.test(\"Empty field name\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.age) {\r",
							"        pm.test(\"Empty field age\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.salary) {\r",
							"        pm.test(\"Empty field salary\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length < 3 && req.name.length > 0) {\r",
							"        pm.test(\"Length name < 3\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length > 40) {\r",
							"        pm.test(\"Length name > 40\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.trim() !== req.name) {\r",
							"        pm.test(\"There are spaces\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age < 18) {\r",
							"        pm.test(\"Age < 18\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age > 120) {\r",
							"        pm.test(\"Age > 120\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary < 1) {\r",
							"        pm.test(\"Salary < 1\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary > 1000000) {\r",
							"        pm.test(\"Salary > 1000000\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.salary))) {\r",
							"        pm.test(\"Salary is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.age))) {\r",
							"        pm.test(\"Age is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"}\r",
							"\r",
							"if (checkValid()) {\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"} \r",
							"else checkNotValid() "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Lena",
							"type": "default"
						},
						{
							"key": "age",
							"value": "40",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "name 40",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1****. Преобразовать задание 1 таким образом, чтобы вы отправляли параметры через CSV файл. У вас будет ровно 1 запрос в коллекции, который будет повторяться столько раз, сколько строк в CSV файле. Также должна быть написана функция в тестах, которая проверяет валидность входящих данных, и в зависимости от этого проверяет на статус 200 или НЕ 200.\r",
							"let req = request.data\r",
							"let name = req.name;\r",
							"let age = req.age;\r",
							"let salary = req.salary;\r",
							"\r",
							"const checkName = function(value) {\r",
							"    if (value && (3 <= +value.length) && (+value.length <= 40) && (value.trim() === value)) \r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkAge = function(value) {\r",
							"    if (value && (value >= 18) && (value <= 120) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkSalary = function(value) {\r",
							"    if (value && (value >= 1) && (value <= 1000000) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"\r",
							"const checkValid = function() {\r",
							"    if (checkName(name) && checkAge(age) && checkSalary(salary))\r",
							"        return true\r",
							"        else false   \r",
							"}\r",
							"\r",
							"const checkNotValid = function() {\r",
							"if (!req.name) {\r",
							"        pm.test(\"Empty field name\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.age) {\r",
							"        pm.test(\"Empty field age\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.salary) {\r",
							"        pm.test(\"Empty field salary\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length < 3 && req.name.length > 0) {\r",
							"        pm.test(\"Length name < 3\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length > 40) {\r",
							"        pm.test(\"Length name > 40\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.trim() !== req.name) {\r",
							"        pm.test(\"There are spaces\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age < 18) {\r",
							"        pm.test(\"Age < 18\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age > 120) {\r",
							"        pm.test(\"Age > 120\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary < 1) {\r",
							"        pm.test(\"Salary < 1\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary > 1000000) {\r",
							"        pm.test(\"Salary > 1000000\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.salary))) {\r",
							"        pm.test(\"Salary is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.age))) {\r",
							"        pm.test(\"Age is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"}\r",
							"\r",
							"if (checkValid()) {\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"} \r",
							"else checkNotValid() "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "LenaLenaLenaLenaLenaLenaLenaLenaLenaLena",
							"type": "default"
						},
						{
							"key": "age",
							"value": "40",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "name empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1****. Преобразовать задание 1 таким образом, чтобы вы отправляли параметры через CSV файл. У вас будет ровно 1 запрос в коллекции, который будет повторяться столько раз, сколько строк в CSV файле. Также должна быть написана функция в тестах, которая проверяет валидность входящих данных, и в зависимости от этого проверяет на статус 200 или НЕ 200.\r",
							"let req = request.data\r",
							"let name = req.name;\r",
							"let age = req.age;\r",
							"let salary = req.salary;\r",
							"\r",
							"const checkName = function(value) {\r",
							"    if (value && (3 <= +value.length) && (+value.length <= 40) && (value.trim() === value)) \r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkAge = function(value) {\r",
							"    if (value && (value >= 18) && (value <= 120) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkSalary = function(value) {\r",
							"    if (value && (value >= 1) && (value <= 1000000) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"\r",
							"const checkValid = function() {\r",
							"    if (checkName(name) && checkAge(age) && checkSalary(salary))\r",
							"        return true\r",
							"        else false   \r",
							"}\r",
							"\r",
							"const checkNotValid = function() {\r",
							"if (!req.name) {\r",
							"        pm.test(\"Empty field name\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.age) {\r",
							"        pm.test(\"Empty field age\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.salary) {\r",
							"        pm.test(\"Empty field salary\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length < 3 && req.name.length > 0) {\r",
							"        pm.test(\"Length name < 3\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length > 40) {\r",
							"        pm.test(\"Length name > 40\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.trim() !== req.name) {\r",
							"        pm.test(\"There are spaces\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age < 18) {\r",
							"        pm.test(\"Age < 18\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age > 120) {\r",
							"        pm.test(\"Age > 120\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary < 1) {\r",
							"        pm.test(\"Salary < 1\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary > 1000000) {\r",
							"        pm.test(\"Salary > 1000000\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.salary))) {\r",
							"        pm.test(\"Salary is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.age))) {\r",
							"        pm.test(\"Age is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"}\r",
							"\r",
							"if (checkValid()) {\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"} \r",
							"else checkNotValid() "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "",
							"type": "default"
						},
						{
							"key": "age",
							"value": "40",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "name 0",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1****. Преобразовать задание 1 таким образом, чтобы вы отправляли параметры через CSV файл. У вас будет ровно 1 запрос в коллекции, который будет повторяться столько раз, сколько строк в CSV файле. Также должна быть написана функция в тестах, которая проверяет валидность входящих данных, и в зависимости от этого проверяет на статус 200 или НЕ 200.\r",
							"let req = request.data\r",
							"let name = req.name;\r",
							"let age = req.age;\r",
							"let salary = req.salary;\r",
							"\r",
							"const checkName = function(value) {\r",
							"    if (value && (3 <= +value.length) && (+value.length <= 40) && (value.trim() === value)) \r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkAge = function(value) {\r",
							"    if (value && (value >= 18) && (value <= 120) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkSalary = function(value) {\r",
							"    if (value && (value >= 1) && (value <= 1000000) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"\r",
							"const checkValid = function() {\r",
							"    if (checkName(name) && checkAge(age) && checkSalary(salary))\r",
							"        return true\r",
							"        else false   \r",
							"}\r",
							"\r",
							"const checkNotValid = function() {\r",
							"if (!req.name) {\r",
							"        pm.test(\"Empty field name\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.age) {\r",
							"        pm.test(\"Empty field age\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.salary) {\r",
							"        pm.test(\"Empty field salary\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length < 3 && req.name.length > 0) {\r",
							"        pm.test(\"Length name < 3\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length > 40) {\r",
							"        pm.test(\"Length name > 40\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.trim() !== req.name) {\r",
							"        pm.test(\"There are spaces\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age < 18) {\r",
							"        pm.test(\"Age < 18\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age > 120) {\r",
							"        pm.test(\"Age > 120\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary < 1) {\r",
							"        pm.test(\"Salary < 1\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary > 1000000) {\r",
							"        pm.test(\"Salary > 1000000\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.salary))) {\r",
							"        pm.test(\"Salary is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.age))) {\r",
							"        pm.test(\"Age is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"}\r",
							"\r",
							"if (checkValid()) {\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"} \r",
							"else checkNotValid() "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "0",
							"type": "default"
						},
						{
							"key": "age",
							"value": "40",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "age  not int",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1****. Преобразовать задание 1 таким образом, чтобы вы отправляли параметры через CSV файл. У вас будет ровно 1 запрос в коллекции, который будет повторяться столько раз, сколько строк в CSV файле. Также должна быть написана функция в тестах, которая проверяет валидность входящих данных, и в зависимости от этого проверяет на статус 200 или НЕ 200.\r",
							"let req = request.data\r",
							"let name = req.name;\r",
							"let age = req.age;\r",
							"let salary = req.salary;\r",
							"\r",
							"const checkName = function(value) {\r",
							"    if (value && (3 <= +value.length) && (+value.length <= 40) && (value.trim() === value)) \r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkAge = function(value) {\r",
							"    if (value && (value >= 18) && (value <= 120) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkSalary = function(value) {\r",
							"    if (value && (value >= 1) && (value <= 1000000) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"\r",
							"const checkValid = function() {\r",
							"    if (checkName(name) && checkAge(age) && checkSalary(salary))\r",
							"        return true\r",
							"        else false   \r",
							"}\r",
							"\r",
							"const checkNotValid = function() {\r",
							"if (!req.name) {\r",
							"        pm.test(\"Empty field name\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.age) {\r",
							"        pm.test(\"Empty field age\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.salary) {\r",
							"        pm.test(\"Empty field salary\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length < 3 && req.name.length > 0) {\r",
							"        pm.test(\"Length name < 3\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length > 40) {\r",
							"        pm.test(\"Length name > 40\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.trim() !== req.name) {\r",
							"        pm.test(\"There are spaces\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age < 18) {\r",
							"        pm.test(\"Age < 18\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age > 120) {\r",
							"        pm.test(\"Age > 120\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary < 1) {\r",
							"        pm.test(\"Salary < 1\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary > 1000000) {\r",
							"        pm.test(\"Salary > 1000000\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.salary))) {\r",
							"        pm.test(\"Salary is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.age))) {\r",
							"        pm.test(\"Age is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"}\r",
							"\r",
							"if (checkValid()) {\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"} \r",
							"else checkNotValid() "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Lena",
							"type": "default"
						},
						{
							"key": "age",
							"value": "4.11",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "name 41",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1****. Преобразовать задание 1 таким образом, чтобы вы отправляли параметры через CSV файл. У вас будет ровно 1 запрос в коллекции, который будет повторяться столько раз, сколько строк в CSV файле. Также должна быть написана функция в тестах, которая проверяет валидность входящих данных, и в зависимости от этого проверяет на статус 200 или НЕ 200.\r",
							"let req = request.data\r",
							"let name = req.name;\r",
							"let age = req.age;\r",
							"let salary = req.salary;\r",
							"\r",
							"const checkName = function(value) {\r",
							"    if (value && (3 <= +value.length) && (+value.length <= 40) && (value.trim() === value)) \r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkAge = function(value) {\r",
							"    if (value && (value >= 18) && (value <= 120) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkSalary = function(value) {\r",
							"    if (value && (value >= 1) && (value <= 1000000) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"\r",
							"const checkValid = function() {\r",
							"    if (checkName(name) && checkAge(age) && checkSalary(salary))\r",
							"        return true\r",
							"        else false   \r",
							"}\r",
							"\r",
							"const checkNotValid = function() {\r",
							"if (!req.name) {\r",
							"        pm.test(\"Empty field name\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.age) {\r",
							"        pm.test(\"Empty field age\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.salary) {\r",
							"        pm.test(\"Empty field salary\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length < 3 && req.name.length > 0) {\r",
							"        pm.test(\"Length name < 3\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length > 40) {\r",
							"        pm.test(\"Length name > 40\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.trim() !== req.name) {\r",
							"        pm.test(\"There are spaces\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age < 18) {\r",
							"        pm.test(\"Age < 18\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age > 120) {\r",
							"        pm.test(\"Age > 120\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary < 1) {\r",
							"        pm.test(\"Salary < 1\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary > 1000000) {\r",
							"        pm.test(\"Salary > 1000000\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.salary))) {\r",
							"        pm.test(\"Salary is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.age))) {\r",
							"        pm.test(\"Age is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"}\r",
							"\r",
							"if (checkValid()) {\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"} \r",
							"else checkNotValid() "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "LenaLenaLenaLenaLenaLenaLenaLenaLenaLenaL",
							"type": "default"
						},
						{
							"key": "age",
							"value": "120",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "999999",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "age 121",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1****. Преобразовать задание 1 таким образом, чтобы вы отправляли параметры через CSV файл. У вас будет ровно 1 запрос в коллекции, который будет повторяться столько раз, сколько строк в CSV файле. Также должна быть написана функция в тестах, которая проверяет валидность входящих данных, и в зависимости от этого проверяет на статус 200 или НЕ 200.\r",
							"let req = request.data\r",
							"let name = req.name;\r",
							"let age = req.age;\r",
							"let salary = req.salary;\r",
							"\r",
							"const checkName = function(value) {\r",
							"    if (value && (3 <= +value.length) && (+value.length <= 40) && (value.trim() === value)) \r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkAge = function(value) {\r",
							"    if (value && (value >= 18) && (value <= 120) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkSalary = function(value) {\r",
							"    if (value && (value >= 1) && (value <= 1000000) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"\r",
							"const checkValid = function() {\r",
							"    if (checkName(name) && checkAge(age) && checkSalary(salary))\r",
							"        return true\r",
							"        else false   \r",
							"}\r",
							"\r",
							"const checkNotValid = function() {\r",
							"if (!req.name) {\r",
							"        pm.test(\"Empty field name\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.age) {\r",
							"        pm.test(\"Empty field age\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.salary) {\r",
							"        pm.test(\"Empty field salary\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length < 3 && req.name.length > 0) {\r",
							"        pm.test(\"Length name < 3\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length > 40) {\r",
							"        pm.test(\"Length name > 40\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.trim() !== req.name) {\r",
							"        pm.test(\"There are spaces\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age < 18) {\r",
							"        pm.test(\"Age < 18\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age > 120) {\r",
							"        pm.test(\"Age > 120\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary < 1) {\r",
							"        pm.test(\"Salary < 1\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary > 1000000) {\r",
							"        pm.test(\"Salary > 1000000\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.salary))) {\r",
							"        pm.test(\"Salary is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.age))) {\r",
							"        pm.test(\"Age is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"}\r",
							"\r",
							"if (checkValid()) {\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"} \r",
							"else checkNotValid() "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Lena",
							"type": "default"
						},
						{
							"key": "age",
							"value": "121",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "999999",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "age 18",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1****. Преобразовать задание 1 таким образом, чтобы вы отправляли параметры через CSV файл. У вас будет ровно 1 запрос в коллекции, который будет повторяться столько раз, сколько строк в CSV файле. Также должна быть написана функция в тестах, которая проверяет валидность входящих данных, и в зависимости от этого проверяет на статус 200 или НЕ 200.\r",
							"let req = request.data\r",
							"let name = req.name;\r",
							"let age = req.age;\r",
							"let salary = req.salary;\r",
							"\r",
							"const checkName = function(value) {\r",
							"    if (value && (3 <= +value.length) && (+value.length <= 40) && (value.trim() === value)) \r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkAge = function(value) {\r",
							"    if (value && (value >= 18) && (value <= 120) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkSalary = function(value) {\r",
							"    if (value && (value >= 1) && (value <= 1000000) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"\r",
							"const checkValid = function() {\r",
							"    if (checkName(name) && checkAge(age) && checkSalary(salary))\r",
							"        return true\r",
							"        else false   \r",
							"}\r",
							"\r",
							"const checkNotValid = function() {\r",
							"if (!req.name) {\r",
							"        pm.test(\"Empty field name\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.age) {\r",
							"        pm.test(\"Empty field age\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.salary) {\r",
							"        pm.test(\"Empty field salary\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length < 3 && req.name.length > 0) {\r",
							"        pm.test(\"Length name < 3\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length > 40) {\r",
							"        pm.test(\"Length name > 40\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.trim() !== req.name) {\r",
							"        pm.test(\"There are spaces\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age < 18) {\r",
							"        pm.test(\"Age < 18\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age > 120) {\r",
							"        pm.test(\"Age > 120\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary < 1) {\r",
							"        pm.test(\"Salary < 1\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary > 1000000) {\r",
							"        pm.test(\"Salary > 1000000\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.salary))) {\r",
							"        pm.test(\"Salary is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.age))) {\r",
							"        pm.test(\"Age is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"}\r",
							"\r",
							"if (checkValid()) {\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"} \r",
							"else checkNotValid() "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Lena",
							"type": "default"
						},
						{
							"key": "age",
							"value": "18",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "999999",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "age 17",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1****. Преобразовать задание 1 таким образом, чтобы вы отправляли параметры через CSV файл. У вас будет ровно 1 запрос в коллекции, который будет повторяться столько раз, сколько строк в CSV файле. Также должна быть написана функция в тестах, которая проверяет валидность входящих данных, и в зависимости от этого проверяет на статус 200 или НЕ 200.\r",
							"let req = request.data\r",
							"let name = req.name;\r",
							"let age = req.age;\r",
							"let salary = req.salary;\r",
							"\r",
							"const checkName = function(value) {\r",
							"    if (value && (3 <= +value.length) && (+value.length <= 40) && (value.trim() === value)) \r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkAge = function(value) {\r",
							"    if (value && (value >= 18) && (value <= 120) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkSalary = function(value) {\r",
							"    if (value && (value >= 1) && (value <= 1000000) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"\r",
							"const checkValid = function() {\r",
							"    if (checkName(name) && checkAge(age) && checkSalary(salary))\r",
							"        return true\r",
							"        else false   \r",
							"}\r",
							"\r",
							"const checkNotValid = function() {\r",
							"if (!req.name) {\r",
							"        pm.test(\"Empty field name\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.age) {\r",
							"        pm.test(\"Empty field age\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.salary) {\r",
							"        pm.test(\"Empty field salary\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length < 3 && req.name.length > 0) {\r",
							"        pm.test(\"Length name < 3\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length > 40) {\r",
							"        pm.test(\"Length name > 40\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.trim() !== req.name) {\r",
							"        pm.test(\"There are spaces\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age < 18) {\r",
							"        pm.test(\"Age < 18\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age > 120) {\r",
							"        pm.test(\"Age > 120\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary < 1) {\r",
							"        pm.test(\"Salary < 1\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary > 1000000) {\r",
							"        pm.test(\"Salary > 1000000\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.salary))) {\r",
							"        pm.test(\"Salary is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.age))) {\r",
							"        pm.test(\"Age is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"}\r",
							"\r",
							"if (checkValid()) {\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"} \r",
							"else checkNotValid() "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Lena",
							"type": "default"
						},
						{
							"key": "age",
							"value": "17",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "999999",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "age empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1****. Преобразовать задание 1 таким образом, чтобы вы отправляли параметры через CSV файл. У вас будет ровно 1 запрос в коллекции, который будет повторяться столько раз, сколько строк в CSV файле. Также должна быть написана функция в тестах, которая проверяет валидность входящих данных, и в зависимости от этого проверяет на статус 200 или НЕ 200.\r",
							"let req = request.data\r",
							"let name = req.name;\r",
							"let age = req.age;\r",
							"let salary = req.salary;\r",
							"\r",
							"const checkName = function(value) {\r",
							"    if (value && (3 <= +value.length) && (+value.length <= 40) && (value.trim() === value)) \r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkAge = function(value) {\r",
							"    if (value && (value >= 18) && (value <= 120) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkSalary = function(value) {\r",
							"    if (value && (value >= 1) && (value <= 1000000) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"\r",
							"const checkValid = function() {\r",
							"    if (checkName(name) && checkAge(age) && checkSalary(salary))\r",
							"        return true\r",
							"        else false   \r",
							"}\r",
							"\r",
							"const checkNotValid = function() {\r",
							"if (!req.name) {\r",
							"        pm.test(\"Empty field name\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.age) {\r",
							"        pm.test(\"Empty field age\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.salary) {\r",
							"        pm.test(\"Empty field salary\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length < 3 && req.name.length > 0) {\r",
							"        pm.test(\"Length name < 3\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length > 40) {\r",
							"        pm.test(\"Length name > 40\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.trim() !== req.name) {\r",
							"        pm.test(\"There are spaces\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age < 18) {\r",
							"        pm.test(\"Age < 18\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age > 120) {\r",
							"        pm.test(\"Age > 120\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary < 1) {\r",
							"        pm.test(\"Salary < 1\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary > 1000000) {\r",
							"        pm.test(\"Salary > 1000000\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.salary))) {\r",
							"        pm.test(\"Salary is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.age))) {\r",
							"        pm.test(\"Age is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"}\r",
							"\r",
							"if (checkValid()) {\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"} \r",
							"else checkNotValid() "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Lena",
							"type": "default"
						},
						{
							"key": "age",
							"value": "",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "age 0",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1****. Преобразовать задание 1 таким образом, чтобы вы отправляли параметры через CSV файл. У вас будет ровно 1 запрос в коллекции, который будет повторяться столько раз, сколько строк в CSV файле. Также должна быть написана функция в тестах, которая проверяет валидность входящих данных, и в зависимости от этого проверяет на статус 200 или НЕ 200.\r",
							"let req = request.data\r",
							"let name = req.name;\r",
							"let age = req.age;\r",
							"let salary = req.salary;\r",
							"\r",
							"const checkName = function(value) {\r",
							"    if (value && (3 <= +value.length) && (+value.length <= 40) && (value.trim() === value)) \r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkAge = function(value) {\r",
							"    if (value && (value >= 18) && (value <= 120) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkSalary = function(value) {\r",
							"    if (value && (value >= 1) && (value <= 1000000) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"\r",
							"const checkValid = function() {\r",
							"    if (checkName(name) && checkAge(age) && checkSalary(salary))\r",
							"        return true\r",
							"        else false   \r",
							"}\r",
							"\r",
							"const checkNotValid = function() {\r",
							"if (!req.name) {\r",
							"        pm.test(\"Empty field name\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.age) {\r",
							"        pm.test(\"Empty field age\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.salary) {\r",
							"        pm.test(\"Empty field salary\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length < 3 && req.name.length > 0) {\r",
							"        pm.test(\"Length name < 3\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length > 40) {\r",
							"        pm.test(\"Length name > 40\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.trim() !== req.name) {\r",
							"        pm.test(\"There are spaces\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age < 18) {\r",
							"        pm.test(\"Age < 18\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age > 120) {\r",
							"        pm.test(\"Age > 120\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary < 1) {\r",
							"        pm.test(\"Salary < 1\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary > 1000000) {\r",
							"        pm.test(\"Salary > 1000000\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.salary))) {\r",
							"        pm.test(\"Salary is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.age))) {\r",
							"        pm.test(\"Age is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"}\r",
							"\r",
							"if (checkValid()) {\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"} \r",
							"else checkNotValid() "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Lena",
							"type": "default"
						},
						{
							"key": "age",
							"value": "0",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "999999",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "age 120",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1****. Преобразовать задание 1 таким образом, чтобы вы отправляли параметры через CSV файл. У вас будет ровно 1 запрос в коллекции, который будет повторяться столько раз, сколько строк в CSV файле. Также должна быть написана функция в тестах, которая проверяет валидность входящих данных, и в зависимости от этого проверяет на статус 200 или НЕ 200.\r",
							"let req = request.data\r",
							"let name = req.name;\r",
							"let age = req.age;\r",
							"let salary = req.salary;\r",
							"\r",
							"const checkName = function(value) {\r",
							"    if (value && (3 <= +value.length) && (+value.length <= 40) && (value.trim() === value)) \r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkAge = function(value) {\r",
							"    if (value && (value >= 18) && (value <= 120) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkSalary = function(value) {\r",
							"    if (value && (value >= 1) && (value <= 1000000) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"\r",
							"const checkValid = function() {\r",
							"    if (checkName(name) && checkAge(age) && checkSalary(salary))\r",
							"        return true\r",
							"        else false   \r",
							"}\r",
							"\r",
							"const checkNotValid = function() {\r",
							"if (!req.name) {\r",
							"        pm.test(\"Empty field name\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.age) {\r",
							"        pm.test(\"Empty field age\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.salary) {\r",
							"        pm.test(\"Empty field salary\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length < 3 && req.name.length > 0) {\r",
							"        pm.test(\"Length name < 3\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length > 40) {\r",
							"        pm.test(\"Length name > 40\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.trim() !== req.name) {\r",
							"        pm.test(\"There are spaces\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age < 18) {\r",
							"        pm.test(\"Age < 18\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age > 120) {\r",
							"        pm.test(\"Age > 120\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary < 1) {\r",
							"        pm.test(\"Salary < 1\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary > 1000000) {\r",
							"        pm.test(\"Salary > 1000000\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.salary))) {\r",
							"        pm.test(\"Salary is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.age))) {\r",
							"        pm.test(\"Age is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"}\r",
							"\r",
							"if (checkValid()) {\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"} \r",
							"else checkNotValid() "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Lena",
							"type": "default"
						},
						{
							"key": "age",
							"value": "120",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "1000000",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "salary 1000001",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1****. Преобразовать задание 1 таким образом, чтобы вы отправляли параметры через CSV файл. У вас будет ровно 1 запрос в коллекции, который будет повторяться столько раз, сколько строк в CSV файле. Также должна быть написана функция в тестах, которая проверяет валидность входящих данных, и в зависимости от этого проверяет на статус 200 или НЕ 200.\r",
							"let req = request.data\r",
							"let name = req.name;\r",
							"let age = req.age;\r",
							"let salary = req.salary;\r",
							"\r",
							"const checkName = function(value) {\r",
							"    if (value && (3 <= +value.length) && (+value.length <= 40) && (value.trim() === value)) \r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkAge = function(value) {\r",
							"    if (value && (value >= 18) && (value <= 120) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkSalary = function(value) {\r",
							"    if (value && (value >= 1) && (value <= 1000000) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"\r",
							"const checkValid = function() {\r",
							"    if (checkName(name) && checkAge(age) && checkSalary(salary))\r",
							"        return true\r",
							"        else false   \r",
							"}\r",
							"\r",
							"const checkNotValid = function() {\r",
							"if (!req.name) {\r",
							"        pm.test(\"Empty field name\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.age) {\r",
							"        pm.test(\"Empty field age\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.salary) {\r",
							"        pm.test(\"Empty field salary\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length < 3 && req.name.length > 0) {\r",
							"        pm.test(\"Length name < 3\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length > 40) {\r",
							"        pm.test(\"Length name > 40\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.trim() !== req.name) {\r",
							"        pm.test(\"There are spaces\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age < 18) {\r",
							"        pm.test(\"Age < 18\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age > 120) {\r",
							"        pm.test(\"Age > 120\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary < 1) {\r",
							"        pm.test(\"Salary < 1\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary > 1000000) {\r",
							"        pm.test(\"Salary > 1000000\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.salary))) {\r",
							"        pm.test(\"Salary is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.age))) {\r",
							"        pm.test(\"Age is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"}\r",
							"\r",
							"if (checkValid()) {\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"} \r",
							"else checkNotValid() "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Lena",
							"type": "default"
						},
						{
							"key": "age",
							"value": "120",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "1000000",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "salary 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1****. Преобразовать задание 1 таким образом, чтобы вы отправляли параметры через CSV файл. У вас будет ровно 1 запрос в коллекции, который будет повторяться столько раз, сколько строк в CSV файле. Также должна быть написана функция в тестах, которая проверяет валидность входящих данных, и в зависимости от этого проверяет на статус 200 или НЕ 200.\r",
							"let req = request.data\r",
							"let name = req.name;\r",
							"let age = req.age;\r",
							"let salary = req.salary;\r",
							"\r",
							"const checkName = function(value) {\r",
							"    if (value && (3 <= +value.length) && (+value.length <= 40) && (value.trim() === value)) \r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkAge = function(value) {\r",
							"    if (value && (value >= 18) && (value <= 120) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkSalary = function(value) {\r",
							"    if (value && (value >= 1) && (value <= 1000000) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"\r",
							"const checkValid = function() {\r",
							"    if (checkName(name) && checkAge(age) && checkSalary(salary))\r",
							"        return true\r",
							"        else false   \r",
							"}\r",
							"\r",
							"const checkNotValid = function() {\r",
							"if (!req.name) {\r",
							"        pm.test(\"Empty field name\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.age) {\r",
							"        pm.test(\"Empty field age\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.salary) {\r",
							"        pm.test(\"Empty field salary\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length < 3 && req.name.length > 0) {\r",
							"        pm.test(\"Length name < 3\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length > 40) {\r",
							"        pm.test(\"Length name > 40\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.trim() !== req.name) {\r",
							"        pm.test(\"There are spaces\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age < 18) {\r",
							"        pm.test(\"Age < 18\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age > 120) {\r",
							"        pm.test(\"Age > 120\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary < 1) {\r",
							"        pm.test(\"Salary < 1\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary > 1000000) {\r",
							"        pm.test(\"Salary > 1000000\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.salary))) {\r",
							"        pm.test(\"Salary is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.age))) {\r",
							"        pm.test(\"Age is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"}\r",
							"\r",
							"if (checkValid()) {\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"} \r",
							"else checkNotValid() "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Lena",
							"type": "default"
						},
						{
							"key": "age",
							"value": "120",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "1",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "salary 0",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1****. Преобразовать задание 1 таким образом, чтобы вы отправляли параметры через CSV файл. У вас будет ровно 1 запрос в коллекции, который будет повторяться столько раз, сколько строк в CSV файле. Также должна быть написана функция в тестах, которая проверяет валидность входящих данных, и в зависимости от этого проверяет на статус 200 или НЕ 200.\r",
							"let req = request.data\r",
							"let name = req.name;\r",
							"let age = req.age;\r",
							"let salary = req.salary;\r",
							"\r",
							"const checkName = function(value) {\r",
							"    if (value && (3 <= +value.length) && (+value.length <= 40) && (value.trim() === value)) \r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkAge = function(value) {\r",
							"    if (value && (value >= 18) && (value <= 120) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkSalary = function(value) {\r",
							"    if (value && (value >= 1) && (value <= 1000000) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"\r",
							"const checkValid = function() {\r",
							"    if (checkName(name) && checkAge(age) && checkSalary(salary))\r",
							"        return true\r",
							"        else false   \r",
							"}\r",
							"\r",
							"const checkNotValid = function() {\r",
							"if (!req.name) {\r",
							"        pm.test(\"Empty field name\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.age) {\r",
							"        pm.test(\"Empty field age\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.salary) {\r",
							"        pm.test(\"Empty field salary\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length < 3 && req.name.length > 0) {\r",
							"        pm.test(\"Length name < 3\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length > 40) {\r",
							"        pm.test(\"Length name > 40\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.trim() !== req.name) {\r",
							"        pm.test(\"There are spaces\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age < 18) {\r",
							"        pm.test(\"Age < 18\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age > 120) {\r",
							"        pm.test(\"Age > 120\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary < 1) {\r",
							"        pm.test(\"Salary < 1\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary > 1000000) {\r",
							"        pm.test(\"Salary > 1000000\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.salary))) {\r",
							"        pm.test(\"Salary is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.age))) {\r",
							"        pm.test(\"Age is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"}\r",
							"\r",
							"if (checkValid()) {\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"} \r",
							"else checkNotValid() "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Lena",
							"type": "default"
						},
						{
							"key": "age",
							"value": "40",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "0",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "salary Nan",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1****. Преобразовать задание 1 таким образом, чтобы вы отправляли параметры через CSV файл. У вас будет ровно 1 запрос в коллекции, который будет повторяться столько раз, сколько строк в CSV файле. Также должна быть написана функция в тестах, которая проверяет валидность входящих данных, и в зависимости от этого проверяет на статус 200 или НЕ 200.\r",
							"let req = request.data\r",
							"let name = req.name;\r",
							"let age = req.age;\r",
							"let salary = req.salary;\r",
							"\r",
							"const checkName = function(value) {\r",
							"    if (value && (3 <= +value.length) && (+value.length <= 40) && (value.trim() === value)) \r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkAge = function(value) {\r",
							"    if (value && (value >= 18) && (value <= 120) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkSalary = function(value) {\r",
							"    if (value && (value >= 1) && (value <= 1000000) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"\r",
							"const checkValid = function() {\r",
							"    if (checkName(name) && checkAge(age) && checkSalary(salary))\r",
							"        return true\r",
							"        else false   \r",
							"}\r",
							"\r",
							"const checkNotValid = function() {\r",
							"if (!req.name) {\r",
							"        pm.test(\"Empty field name\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.age) {\r",
							"        pm.test(\"Empty field age\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.salary) {\r",
							"        pm.test(\"Empty field salary\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length < 3 && req.name.length > 0) {\r",
							"        pm.test(\"Length name < 3\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length > 40) {\r",
							"        pm.test(\"Length name > 40\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.trim() !== req.name) {\r",
							"        pm.test(\"There are spaces\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age < 18) {\r",
							"        pm.test(\"Age < 18\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age > 120) {\r",
							"        pm.test(\"Age > 120\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary < 1) {\r",
							"        pm.test(\"Salary < 1\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary > 1000000) {\r",
							"        pm.test(\"Salary > 1000000\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.salary))) {\r",
							"        pm.test(\"Salary is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.age))) {\r",
							"        pm.test(\"Age is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"}\r",
							"\r",
							"if (checkValid()) {\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"} \r",
							"else checkNotValid() "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Lena",
							"type": "default"
						},
						{
							"key": "age",
							"value": "40",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "fff",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "salary not int",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1****. Преобразовать задание 1 таким образом, чтобы вы отправляли параметры через CSV файл. У вас будет ровно 1 запрос в коллекции, который будет повторяться столько раз, сколько строк в CSV файле. Также должна быть написана функция в тестах, которая проверяет валидность входящих данных, и в зависимости от этого проверяет на статус 200 или НЕ 200.\r",
							"let req = request.data\r",
							"let name = req.name;\r",
							"let age = req.age;\r",
							"let salary = req.salary;\r",
							"\r",
							"const checkName = function(value) {\r",
							"    if (value && (3 <= +value.length) && (+value.length <= 40) && (value.trim() === value)) \r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkAge = function(value) {\r",
							"    if (value && (value >= 18) && (value <= 120) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkSalary = function(value) {\r",
							"    if (value && (value >= 1) && (value <= 1000000) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"\r",
							"const checkValid = function() {\r",
							"    if (checkName(name) && checkAge(age) && checkSalary(salary))\r",
							"        return true\r",
							"        else false   \r",
							"}\r",
							"\r",
							"const checkNotValid = function() {\r",
							"if (!req.name) {\r",
							"        pm.test(\"Empty field name\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.age) {\r",
							"        pm.test(\"Empty field age\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.salary) {\r",
							"        pm.test(\"Empty field salary\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length < 3 && req.name.length > 0) {\r",
							"        pm.test(\"Length name < 3\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length > 40) {\r",
							"        pm.test(\"Length name > 40\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.trim() !== req.name) {\r",
							"        pm.test(\"There are spaces\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age < 18) {\r",
							"        pm.test(\"Age < 18\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age > 120) {\r",
							"        pm.test(\"Age > 120\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary < 1) {\r",
							"        pm.test(\"Salary < 1\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary > 1000000) {\r",
							"        pm.test(\"Salary > 1000000\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.salary))) {\r",
							"        pm.test(\"Salary is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.age))) {\r",
							"        pm.test(\"Age is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"}\r",
							"\r",
							"if (checkValid()) {\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"} \r",
							"else checkNotValid() "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Lena",
							"type": "default"
						},
						{
							"key": "age",
							"value": "40",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "4.11",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "salary empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1****. Преобразовать задание 1 таким образом, чтобы вы отправляли параметры через CSV файл. У вас будет ровно 1 запрос в коллекции, который будет повторяться столько раз, сколько строк в CSV файле. Также должна быть написана функция в тестах, которая проверяет валидность входящих данных, и в зависимости от этого проверяет на статус 200 или НЕ 200.\r",
							"let req = request.data\r",
							"let name = req.name;\r",
							"let age = req.age;\r",
							"let salary = req.salary;\r",
							"\r",
							"const checkName = function(value) {\r",
							"    if (value && (3 <= +value.length) && (+value.length <= 40) && (value.trim() === value)) \r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkAge = function(value) {\r",
							"    if (value && (value >= 18) && (value <= 120) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkSalary = function(value) {\r",
							"    if (value && (value >= 1) && (value <= 1000000) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"\r",
							"const checkValid = function() {\r",
							"    if (checkName(name) && checkAge(age) && checkSalary(salary))\r",
							"        return true\r",
							"        else false   \r",
							"}\r",
							"\r",
							"const checkNotValid = function() {\r",
							"if (!req.name) {\r",
							"        pm.test(\"Empty field name\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.age) {\r",
							"        pm.test(\"Empty field age\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.salary) {\r",
							"        pm.test(\"Empty field salary\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length < 3 && req.name.length > 0) {\r",
							"        pm.test(\"Length name < 3\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length > 40) {\r",
							"        pm.test(\"Length name > 40\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.trim() !== req.name) {\r",
							"        pm.test(\"There are spaces\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age < 18) {\r",
							"        pm.test(\"Age < 18\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age > 120) {\r",
							"        pm.test(\"Age > 120\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary < 1) {\r",
							"        pm.test(\"Salary < 1\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary > 1000000) {\r",
							"        pm.test(\"Salary > 1000000\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.salary))) {\r",
							"        pm.test(\"Salary is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.age))) {\r",
							"        pm.test(\"Age is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"}\r",
							"\r",
							"if (checkValid()) {\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"} \r",
							"else checkNotValid() "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Lena",
							"type": "default"
						},
						{
							"key": "age",
							"value": "40",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "age nan",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1****. Преобразовать задание 1 таким образом, чтобы вы отправляли параметры через CSV файл. У вас будет ровно 1 запрос в коллекции, который будет повторяться столько раз, сколько строк в CSV файле. Также должна быть написана функция в тестах, которая проверяет валидность входящих данных, и в зависимости от этого проверяет на статус 200 или НЕ 200.\r",
							"let req = request.data\r",
							"let name = req.name;\r",
							"let age = req.age;\r",
							"let salary = req.salary;\r",
							"\r",
							"const checkName = function(value) {\r",
							"    if (value && (3 <= +value.length) && (+value.length <= 40) && (value.trim() === value)) \r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkAge = function(value) {\r",
							"    if (value && (value >= 18) && (value <= 120) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkSalary = function(value) {\r",
							"    if (value && (value >= 1) && (value <= 1000000) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"\r",
							"const checkValid = function() {\r",
							"    if (checkName(name) && checkAge(age) && checkSalary(salary))\r",
							"        return true\r",
							"        else false   \r",
							"}\r",
							"\r",
							"const checkNotValid = function() {\r",
							"if (!req.name) {\r",
							"        pm.test(\"Empty field name\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.age) {\r",
							"        pm.test(\"Empty field age\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.salary) {\r",
							"        pm.test(\"Empty field salary\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length < 3 && req.name.length > 0) {\r",
							"        pm.test(\"Length name < 3\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length > 40) {\r",
							"        pm.test(\"Length name > 40\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.trim() !== req.name) {\r",
							"        pm.test(\"There are spaces\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age < 18) {\r",
							"        pm.test(\"Age < 18\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age > 120) {\r",
							"        pm.test(\"Age > 120\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary < 1) {\r",
							"        pm.test(\"Salary < 1\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary > 1000000) {\r",
							"        pm.test(\"Salary > 1000000\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.salary))) {\r",
							"        pm.test(\"Salary is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.age))) {\r",
							"        pm.test(\"Age is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"}\r",
							"\r",
							"if (checkValid()) {\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"} \r",
							"else checkNotValid() "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Lena",
							"type": "default"
						},
						{
							"key": "age",
							"value": "fff",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "999999",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "salary 999999",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1****. Преобразовать задание 1 таким образом, чтобы вы отправляли параметры через CSV файл. У вас будет ровно 1 запрос в коллекции, который будет повторяться столько раз, сколько строк в CSV файле. Также должна быть написана функция в тестах, которая проверяет валидность входящих данных, и в зависимости от этого проверяет на статус 200 или НЕ 200.\r",
							"let req = request.data\r",
							"let name = req.name;\r",
							"let age = req.age;\r",
							"let salary = req.salary;\r",
							"\r",
							"const checkName = function(value) {\r",
							"    if (value && (3 <= +value.length) && (+value.length <= 40) && (value.trim() === value)) \r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkAge = function(value) {\r",
							"    if (value && (value >= 18) && (value <= 120) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkSalary = function(value) {\r",
							"    if (value && (value >= 1) && (value <= 1000000) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"\r",
							"const checkValid = function() {\r",
							"    if (checkName(name) && checkAge(age) && checkSalary(salary))\r",
							"        return true\r",
							"        else false   \r",
							"}\r",
							"\r",
							"const checkNotValid = function() {\r",
							"if (!req.name) {\r",
							"        pm.test(\"Empty field name\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.age) {\r",
							"        pm.test(\"Empty field age\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.salary) {\r",
							"        pm.test(\"Empty field salary\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length < 3 && req.name.length > 0) {\r",
							"        pm.test(\"Length name < 3\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length > 40) {\r",
							"        pm.test(\"Length name > 40\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.trim() !== req.name) {\r",
							"        pm.test(\"There are spaces\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age < 18) {\r",
							"        pm.test(\"Age < 18\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age > 120) {\r",
							"        pm.test(\"Age > 120\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary < 1) {\r",
							"        pm.test(\"Salary < 1\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary > 1000000) {\r",
							"        pm.test(\"Salary > 1000000\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.salary))) {\r",
							"        pm.test(\"Salary is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.age))) {\r",
							"        pm.test(\"Age is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"}\r",
							"\r",
							"if (checkValid()) {\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"} \r",
							"else checkNotValid() "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Lena",
							"type": "default"
						},
						{
							"key": "age",
							"value": "1f",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "999999",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "name 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1****. Преобразовать задание 1 таким образом, чтобы вы отправляли параметры через CSV файл. У вас будет ровно 1 запрос в коллекции, который будет повторяться столько раз, сколько строк в CSV файле. Также должна быть написана функция в тестах, которая проверяет валидность входящих данных, и в зависимости от этого проверяет на статус 200 или НЕ 200.\r",
							"let req = request.data\r",
							"let name = req.name;\r",
							"let age = req.age;\r",
							"let salary = req.salary;\r",
							"\r",
							"const checkName = function(value) {\r",
							"    if (value && (3 <= +value.length) && (+value.length <= 40) && (value.trim() === value)) \r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkAge = function(value) {\r",
							"    if (value && (value >= 18) && (value <= 120) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkSalary = function(value) {\r",
							"    if (value && (value >= 1) && (value <= 1000000) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"\r",
							"const checkValid = function() {\r",
							"    if (checkName(name) && checkAge(age) && checkSalary(salary))\r",
							"        return true\r",
							"        else false   \r",
							"}\r",
							"\r",
							"const checkNotValid = function() {\r",
							"if (!req.name) {\r",
							"        pm.test(\"Empty field name\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.age) {\r",
							"        pm.test(\"Empty field age\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.salary) {\r",
							"        pm.test(\"Empty field salary\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length < 3 && req.name.length > 0) {\r",
							"        pm.test(\"Length name < 3\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length > 40) {\r",
							"        pm.test(\"Length name > 40\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.trim() !== req.name) {\r",
							"        pm.test(\"There are spaces\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age < 18) {\r",
							"        pm.test(\"Age < 18\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age > 120) {\r",
							"        pm.test(\"Age > 120\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary < 1) {\r",
							"        pm.test(\"Salary < 1\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary > 1000000) {\r",
							"        pm.test(\"Salary > 1000000\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.salary))) {\r",
							"        pm.test(\"Salary is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.age))) {\r",
							"        pm.test(\"Age is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"}\r",
							"\r",
							"if (checkValid()) {\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"} \r",
							"else checkNotValid() "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Le",
							"type": "default"
						},
						{
							"key": "age",
							"value": "10",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "1",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "age salary nan",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1****. Преобразовать задание 1 таким образом, чтобы вы отправляли параметры через CSV файл. У вас будет ровно 1 запрос в коллекции, который будет повторяться столько раз, сколько строк в CSV файле. Также должна быть написана функция в тестах, которая проверяет валидность входящих данных, и в зависимости от этого проверяет на статус 200 или НЕ 200.\r",
							"let req = request.data\r",
							"let name = req.name;\r",
							"let age = req.age;\r",
							"let salary = req.salary;\r",
							"\r",
							"const checkName = function(value) {\r",
							"    if (value && (3 <= +value.length) && (+value.length <= 40) && (value.trim() === value)) \r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkAge = function(value) {\r",
							"    if (value && (value >= 18) && (value <= 120) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"const checkSalary = function(value) {\r",
							"    if (value && (value >= 1) && (value <= 1000000) && (Number.isInteger(Number(value))))\r",
							"        return true \r",
							"        else return false   \r",
							"}\r",
							"\r",
							"const checkValid = function() {\r",
							"    if (checkName(name) && checkAge(age) && checkSalary(salary))\r",
							"        return true\r",
							"        else false   \r",
							"}\r",
							"\r",
							"const checkNotValid = function() {\r",
							"if (!req.name) {\r",
							"        pm.test(\"Empty field name\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.age) {\r",
							"        pm.test(\"Empty field age\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!req.salary) {\r",
							"        pm.test(\"Empty field salary\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length < 3 && req.name.length > 0) {\r",
							"        pm.test(\"Length name < 3\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.length > 40) {\r",
							"        pm.test(\"Length name > 40\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.name.trim() !== req.name) {\r",
							"        pm.test(\"There are spaces\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age < 18) {\r",
							"        pm.test(\"Age < 18\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.age > 120) {\r",
							"        pm.test(\"Age > 120\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary < 1) {\r",
							"        pm.test(\"Salary < 1\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (req.salary > 1000000) {\r",
							"        pm.test(\"Salary > 1000000\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.salary))) {\r",
							"        pm.test(\"Salary is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"    if (!Number.isInteger(Number(req.age))) {\r",
							"        pm.test(\"Age is Not integer\", function () {\r",
							"           pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    }\r",
							"}\r",
							"\r",
							"if (checkValid()) {\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"} \r",
							"else checkNotValid() "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Le",
							"type": "default"
						},
						{
							"key": "age",
							"value": "aa",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "aa",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}