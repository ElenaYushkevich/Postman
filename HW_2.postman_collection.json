{
	"info": {
		"_postman_id": "2aa5b3b8-00cc-47a1-9081-041a1637d9f3",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверить, что в body приходит правильный string.\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.eql(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"let person_name = jsonData.name \r",
							"pm.test(\"person_name\", function () {\r",
							"        pm.expect(person_name).to.eql('Lena');\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"person_age\", function () {\r",
							"        pm.expect(jsonData.age).to.eql('40');\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"person_salary\", function () {\r",
							"        pm.expect(jsonData.salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"//Спарсить request\r",
							"let req = request.data\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"req_name\", function () {\r",
							"        pm.expect(req.name).to.eql(person_name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"req_age\", function () {\r",
							"        pm.expect(req.age).to.eql(jsonData.age);\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let req_salary = req.salary * 1\r",
							"pm.test(\"req_salary\", function () {\r",
							"        pm.expect(req_salary).to.eql(jsonData.salary);\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response.\r",
							"console.log('параметр family из response', jsonData.famaly)\r",
							"\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let req_salary_1_5 = req_salary * 4\r",
							"let resp_salary_1_5 = jsonData.family.u_salary_1_5_year\r",
							"pm.test(\"req_salary_4\", function () {\r",
							"        pm.expect(req_salary_1_5).to.eql(resp_salary_1_5);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Lena",
							"type": "default"
						},
						{
							"key": "age",
							"value": "40",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject()\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"req_name\", function () {\r",
							"        pm.expect(req.name).to.eql(jsonData.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"req_age\", function () {\r",
							"        pm.expect(req.age).to.eql(jsonData.age);\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"req_salary\", function () {\r",
							"        pm.expect(+req.salary).to.eql(jsonData.salary);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"let res_famaly = jsonData.family\r",
							"console.log('параметр family из response', res_famaly)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"let res_dog = jsonData.family.pets.dog\r",
							"pm.test(\"Dog has name\", function () {\r",
							"        pm.expect(res_dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog has age\", function () {\r",
							"        pm.expect(res_dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Dog name is Luky\", function () {\r",
							"        pm.expect(res_dog.name).to.eql('Luky');\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Dog age is 4\", function () {\r",
							"        pm.expect(res_dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Lena&age=40&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Lena"
						},
						{
							"key": "age",
							"value": "40"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject()\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let req_name = req.name \r",
							"let person_name = jsonData.name \r",
							"pm.test(\"req_name\", function () {\r",
							"        pm.expect(req_name).to.eql(person_name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"let req_age = req.age * 1\r",
							"let person_age = jsonData.age\r",
							"pm.test(\"req_age\", function () {\r",
							"        pm.expect(req_age).to.eql(person_age);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"let req_salary = req.salary\r",
							"console.log('salary from request', req_salary)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"let person_salary = jsonData.salary\r",
							"console.log('salary from response', person_salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log('salary 0 from response', person_salary[0])\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log('salary 1 from response', person_salary[1])\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log('salary 2 from response', person_salary[2])\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"let salary_0 = person_salary[0]\r",
							"pm.test(\"salary 0 equally salary from request\", function () {\r",
							"        pm.expect(+req_salary).to.eql(salary_0);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"let req_salary_1 = req_salary * 2\r",
							"let salary_1 = person_salary[1]\r",
							"\r",
							"pm.test(\"salary 1 equally salary*2 from request\", function () {\r",
							"        pm.expect(req_salary_1).to.eql(+salary_1);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"let req_salary_2 = req_salary * 3\r",
							"let salary_2 = person_salary[2]\r",
							"\r",
							"pm.test(\"salary 2 equally salary*3 from request\", function () {\r",
							"        pm.expect(req_salary_2).to.eql(+salary_2);\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"// 16. Создать в окружении переменную age\r",
							"// 17. Создать в окружении переменную salary\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"//pm.environment.set(\"name\", \"Lena\");\r",
							"pm.environment.set(\"name\", jsonData.name);\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", jsonData.age);\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", jsonData.salary[0]);\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"for (i in person_salary) {\r",
							"    console.log('elem from salary', person_salary[i])\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Lena&age=40&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Lena"
						},
						{
							"key": "age",
							"value": "40"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let req = request.data\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"json response имеет параметр start_qa_salary\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"json response имеет параметр qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"json response имеет параметр qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"json response имеет параметр qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"json response имеет параметр qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"json response имеет параметр person\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"person\");\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"let req_salary = req.salary * 1\r",
							"let resp_start_qa_salary = jsonData.start_qa_salary\r",
							"pm.test(\"start_qa_salary равен salary из request\", function () {\r",
							"        pm.expect(req_salary).to.eql(resp_start_qa_salary);\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"let req_salary_6_month = req.salary * 2\r",
							"let resp_qa_salary_after_6_months = jsonData.qa_salary_after_6_months\r",
							"pm.test(\"qa_salary_after_6_months равен salary*2 из request\", function () {\r",
							"        pm.expect(req_salary_6_month).to.eql(resp_qa_salary_after_6_months);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"let req_salary_12_month = req.salary * 2.7\r",
							"let resp_qa_salary_after_12_months = jsonData.qa_salary_after_12_months\r",
							"pm.test(\"qa_salary_after_12_months равен salary*2.7 из request\", function () {\r",
							"        pm.expect(req_salary_12_month).to.eql(resp_qa_salary_after_12_months);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"let req_salary_15_year = req.salary * 3.3\r",
							"let resp_qa_salary_after_15_year = jsonData[\"qa_salary_after_1.5_year\"]\r",
							"pm.test(\"qa_salary_after_1.5_year равен salary*3.3 из request\", function () {\r",
							"        pm.expect(req_salary_15_year).to.eql(resp_qa_salary_after_15_year);\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"let req_salary_35_year = req.salary * 3.8\r",
							"let resp_qa_salary_after_35_year = jsonData[\"qa_salary_after_3.5_years\"]\r",
							"pm.test(\"qa_salary_after_3.5_year равен salary*3.8 из request\", function () {\r",
							"        pm.expect(req_salary_35_year).to.eql(resp_qa_salary_after_35_year);\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"let u_name_1 = jsonData.person.u_name[1]\r",
							"pm.test(\"1-й элемент из u_name равен salary из request\", function () {\r",
							"        pm.expect(req_salary).to.eql(u_name_1);\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"let req_age = req.age\r",
							"let res_age = jsonData.person.u_age\r",
							"pm.test(\"u_age равен age из request\", function () {\r",
							"        pm.expect(+req_age).to.eql(res_age);\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"let req_salary_5_year = req.salary * 4.2\r",
							"let resp_u_salary_5_years = jsonData.person.u_salary_5_years\r",
							"pm.test(\"u_salary_5_years равен salary*4.2 из request\", function () {\r",
							"        pm.expect(req_salary_5_year).to.eql(resp_u_salary_5_years);\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"//console.log(jsonData.person)\r",
							"\r",
							"for (let i in jsonData.person) {\r",
							"     console.log(`${i} = ${jsonData.person[i]}`)\r",
							" } "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}